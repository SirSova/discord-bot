const Discord = require('discord.js');
const actions = ['–¥–æ–±–∞–≤–∏—Ç—å', '—É–¥–∞–ª–∏—Ç—å', '–ø–æ–∫–∞–∑–∞—Ç—å'];
const model = require('../models/reaction');

/**
 * @param {Discord.Client} bot 
 * @param {Discord.Message} message 
 * @param {string[]} args 
 */
module.exports.run = async (bot, message, args) => {
    let curChannel = message.channel;
    if(message.member.hasPermission(this.help.permission)) {
        let action = args.shift();
        let noSpecifiedParams = () => {
            let syntaxEmbed = new Discord.RichEmbed().setDescription(`${bot.prefix}  ${this.help.syntax}`);
            curChannel.send(`–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –°–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–∫ –Ω–∞–¥–æ:`, syntaxEmbed);
        }
        
        if (actions.includes(action)) {
            switch (action) {
                //add reaction [word] [emoji]
                case '–¥–æ–±–∞–≤–∏—Ç—å': {
                    let word = args[0].split(',').join(' '),
                        emoji = args[1];
                    
                    //no parameters specified
                    if (!word || !emoji) {
                        noSpecifiedParams();
                        return;
                    }

                    //parse custom guild's emoji
                    let guildEmoji = emoji.match(/<?(a:)?(\w{2,32}):(\d{17,19})?/);
                    
                    if (guildEmoji !== null) {
                        //find custom emoji
                        emoji = message.guild.emojis.find('identifier', guildEmoji[0]);
                        
                        if (!emoji) {
                            curChannel.send(`–Ø –Ω–µ –Ω–∞—à–ª–∞ —Ç–∞–∫–æ–π emoji üò•`);
                            return;
                        }
                    }
                    
                    //try add react -> throw error message on failure
                    //              -> add new bot reaction on success
                    await message.react(emoji)
                    .then((messageReaction) => {
                        // messageReaction.remove();
                        guild.botReactions.set(word, emoji);

                        return model({
                            emoji : guildEmoji ? guildEmoji[0] : emoji,
                            word : word,
                            isCustomEmoji : typeof emoji !== "string",
                            guild : message.guild.id
                        }).save();
                    })
                    .then(() => {
                        curChannel.send(`–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ : ${word}`);
                    })
                    .catch((e) => {
                        console.log(e);
                        curChannel.send(`–Ø –Ω–µ —Å–º–æ–≥–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é üò• –ú–æ–∂–µ—Ç –±—ã—Ç—å emoji –∑–∞–¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ`);
                    });
                    break;
                }
                
                //delete reaction by [word]
                case '—É–¥–∞–ª–∏—Ç—å': {
                    let word = args.join(' ');

                    if(!word) {
                        noSpecifiedParams();
                        return;
                    }

                    if (guild.botReactions.has(word)) {
                        guild.botReactions.delete(word);

                        let found = await model.findOne({
                            word : word,
                            guild : message.guild.id
                        });
                        
                        if(!found) {
                            console.log(`${word} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                        } else {
                            await model.deleteOne({
                                _id : found.id
                            })
                        }

                        curChannel.send(`–†–µ–∞–∫—Ü–∏—è –Ω–∞ "${word}" —É–¥–∞–ª–µ–Ω–∞`)
                    } else {
                        curChannel.send(`–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –∏ —Ç–∞–∫ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É—é –Ω–∞ ${word} üòï`);
                    }

                    break;
                }

                //represend all bot reactions
                case '–ø–æ–∫–∞–∑–∞—Ç—å': {
                    let embedReactions = new Discord.RichEmbed(),
                        reactionsStr = '–ú–æ–∏ —Ä–µ–∞–∫—Ü–∏–∏ : \n\n';
                    
                    if(guild.botReactions.size === 0) {
                        curChannel.send(`–Ø –µ—â–µ –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É—é ‚òπ`);
                        return;
                    }

                    guild.botReactions.forEach((emoji, word) => {
                        reactionsStr += `${emoji} => ${word}\n`;
                    });
                    embedReactions.setDescription(reactionsStr);

                    curChannel.send(embedReactions);
                    break;
                }
            }
        } else {
            curChannel.send(`${message.author} –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è : [${actions.join(', ')}]`);
        }
    
    } else {
        curChannel.send(`${message.author} –ò–∑–º–µ–Ω—è—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã üòâ`);
    }
}

module.exports.help = {
    name: "reaction",
    syntax: "reaction (–¥–∞–ª—å—à–µ –æ–¥–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞)\n\t\t[–¥–æ–±–∞–≤–∏—Ç—å] [—Å–ª–æ–≤–æ | –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é] [emoji]\n\t\t[—É–¥–∞–ª–∏—Ç—å] [—Å–ª–æ–≤–æ]\n\t\t[–ø–æ–∫–∞–∑–∞—Ç—å]",
    description : "–¥–æ–±–∞–≤—å —Å–ª–æ–≤–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —è –¥–æ–ª–∂–Ω–∞ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å üòè",
    emoji : "‚ô•",
    permission : "ADMINISTRATOR"
}